//  if we need to use last breakpoint add fictive breakpoint (now it's xxxl)
// use it as last breakpoint for the last pair of values in the mixin
// This ensures that the last value is applied correctly.

// @include avg-bp-multi(right,
// 47.49px, 'md', 'xl',
// 33px, 'xl', 'xxl',
// 151px, 'xxl', 'xxxl'
// );

@mixin avg-bp-multi($property, $values...) {
  $total-pairs: math.floor(math.div(list.length($values), 3));

  @for $i from 1 through $total-pairs {
    $start-index: ($i - 1) * 3 + 1;
    $value: list.nth($values, $start-index);
    $next-value: if($i < $total-pairs, list.nth($values, $start-index + 3), $value);
    $start-breakpoint: list.nth($values, $start-index + 1);
    // if it is the last pair, we use a dummy breakpoint.
    $end-breakpoint: if($i == $total-pairs, 'xxxl', list.nth($values, $start-index + 2));

    $start-screen: map.get($breakpoints, $start-breakpoint);
    $end-screen: map.get($breakpoints, $end-breakpoint);

    @if not $start-screen or not $end-screen {
      @error "Invalid breakpoint name for pair #{$i}. Please use one of: #{map.keys($breakpoints)}";
    }

    & {
      @if $i == 1 {
        #{$property}: $value;
      }
    }

    $start-value-num: strip-unit($value);
    $end-value-num: strip-unit($next-value);
    $start-screen-num: strip-unit($start-screen);
    $end-screen-num: strip-unit($end-screen);

    $calculated-value: calc(
      #{$value} +
        (#{$end-value-num} - #{$start-value-num}) *
        (min(100vw, #{$end-screen}) - #{$start-screen}) /
        (#{$end-screen-num} - #{$start-screen-num})
    );

    @media screen and (min-width: $start-screen) {
      #{$property}: $calculated-value;
    }

    @if $i == $total-pairs {
      @media screen and (min-width: $end-screen) {
        #{$property}: $next-value;
      }
    }
  }
}
